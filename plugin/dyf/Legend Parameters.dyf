{
  "Uuid": "4307a7a2-88a4-490a-b5bc-1f115ae3772c",
  "IsCustomNode": true,
  "Category": "Ladybug.03 :: Extra",
  "Description": "Use this component to change the colors, numerical range, and/or number of divisions\r\nof any Ladybug legend along with the corresponding colored mesh that the legend refers to.\r\nAny Ladybug component that outputs a colored mesh and a legend will have an input\r\nthat can accept Legend Parameters from this component.\r\nThis component particularly helpful in making the colors of Ladybug graphics consistent\r\nfor a presentation or for synchonizing the numerical range and colors between Ladybug graphics.\r\n-",
  "Name": "Legend Parameters",
  "ElementResolver": {
    "ResolutionMap": {
      "DesignScript.Builtin.Dictionary": {
        "Key": "DesignScript.Builtin.Dictionary",
        "Value": "DesignScriptBuiltin.dll"
      },
      "DSCore.Color": {
        "Key": "DSCore.Color",
        "Value": "DSCoreNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Ladybug\";\n\"legendpar_node.py\";",
      "Id": "fcdf53c392494bbcbc5d64d7a0914a3c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7b428173cd7143c0b9a380eacc12f8af",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c844842c22154f0ab3be70ff03b91ed1",
          "Name": "",
          "Description": "Value of expression at line 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\n        \r\n\"\"\"Find packages from Dynamo folder and prepare the code.\"\"\"\r\nimport clr\r\nfrom System import AppDomain, Environment, IO\r\nfrom System.Reflection import Assembly\r\n\r\ndef tryGetPluginPath(plugin):\r\n    \"\"\"Try to get path to plugin folder.\"\"\"\r\n    dynamo = Assembly.Load('DynamoCore')\r\n    dynamoV = dynamo.GetName().Version.ToString().split('.')\r\n    _ver = float(dynamoV[0] + '.' + dynamoV[1])\r\n\r\n    assert _ver >= 1.2, 'You need Dynamo 1.2 or higher to use this plugin!'\r\n\r\n    _appdata = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\r\n    _dynamoPath = '%s\\\\%s\\\\%.1f' % ('Dynamo', 'Dynamo Core', _ver)\r\n    # if the assembly is cached put Revit folder first, and then try to load it from core\r\n    _dynamoPaths = (_dynamoPath.replace('Dynamo Core', 'Dynamo Revit'),\r\n                    _dynamoPath.replace('Dynamo Revit', 'Dynamo Core'))\r\n    _settingsFilename = 'DynamoSettings.xml'\r\n\r\n    pkf = []\r\n    for path in _dynamoPaths:\r\n        settingsFile = IO.Path.Combine(_appdata, path, _settingsFilename)\r\n        if IO.File.Exists(settingsFile):\r\n            with open(settingsFile, 'rb') as outf:\r\n                for line in outf:\r\n                    if line.strip().startswith('<CustomPackageFolders>'):\r\n                        for l in outf:\r\n                            if l.strip().startswith('</CustomPackageFolders>'):\r\n                                break\r\n                            else:\r\n                                pkf.append(l.replace('</string>', '').replace('<string>', '').strip())\r\n\r\n    for p in pkf:\r\n        pp = IO.Path.Combine(p, 'packages', plugin, 'extra')\r\n        # In case of custom folders user may put honeybee under the root folder\r\n        ppp = IO.Path.Combine(p, plugin, 'extra')\r\n        if IO.Directory.Exists(pp):\r\n            return pp\r\n        elif IO.Directory.Exists(ppp):\r\n            return ppp\r\n\r\n\r\ntry:\r\n    plugin, filename = IN\r\n\r\n    p = tryGetPluginPath(plugin)\r\n\r\n    if not p:\r\n        raise ImportError('{} is not installed! Install it from package manager.'.format(plugin))\r\n\r\n\t# import the file and wrap it into sys.append\r\n    f = IO.Path.Combine(p, 'nodesrc', filename)\r\n    with open(f, 'rb') as inf:\r\n        source = '    '.join(inf.readlines())\r\n\r\n    header = 'try:\\n    import sys\\n' + \\\r\n        '    sys.path.append(r\\'{}\\')\\n\\n'.format(p) + \\\r\n        '    sys.path.append(r\\'C:\\Program Files (x86)\\IronPython 2.7\\Lib\\')\\n\\n' + \\\r\n        '    '\r\n\r\n    footer = '\\nexcept Exception, e:\\n' + \\\r\n        '    import traceback\\n' + \\\r\n        '    OUT = \"ERROR:\\\\n\\\\t{}\".format(str(e)) + \\\\\\n' + \\\r\n        '    \"\\\\n\\\\nIf you think this is a bug submit an issue on github.\\\\n\" + \\\\\\n' + \\\r\n        '    \"https://github.com/ladybug-tools/ladybug-dynamo/issues\\\\n\" +  \\\\\\n' + \\\r\n        '    \"and include below error message:\\\\n\\\\n\" + \\\\\\n' + \\\r\n        '    \"{}\".format(traceback.format_exc())\\n'\r\n\r\n    OUT = header + source + footer\r\n\r\nexcept Exception, e:\r\n    import sys\r\n    sys.path.append(r'C:\\Program Files (x86)\\IronPython 2.7\\Lib')\r\n    import traceback\r\n    OUT = \"ERROR:\\n\\t{}\".format(str(e)) + \\\r\n        \"\\n\\nIf you think this is a bug submit an issue on github.\\n\" + \\\r\n        \"https://github.com/ladybug-tools/ladybug-dynamo/issues\\n\" +  \\\r\n        \"and include below error message:\\n\\n\" + \\\r\n        \"{}\".format(traceback.format_exc())\r\n\r\n      ",
      "VariableInputPorts": true,
      "Id": "bb003755c10740f09eecd3db8dd0e7a2",
      "Inputs": [
        {
          "Id": "81e310e5a31f4d6aabbf317f11ff4168",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9787a3aaedb34e11946d6658e11d732e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ece36f7f217e4349815f821ca0f897b0",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonStringNode, PythonNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "7c9fbab7d6b04d988b1d75a6a24de9b9",
      "Inputs": [
        {
          "Id": "7d14c748a6e14e25b17f4cbfd60216e5",
          "Name": "script",
          "Description": "Python script to run.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1b56c28fbdf8470393bc33b8a7d95f79",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e587588c55b94dc890e1f5b505cec31d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7531ec2a855c440e98ccb6cbcdfbb215",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3360c2c8a9d14a95b5f10928639580a5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs a IronPython script from a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "_domain_",
        "TypeName": "int",
        "TypeRank": 1,
        "DefaultValue": "DesignScript.Builtin.Dictionary.ByKeysValues([], [])",
        "Description": " A number representing the higher boundary of the legend's numerical range. The default is set to the highest value of the data stream that the legend refers to."
      },
      "Id": "bd204404be4241fd99ebdde12fccee98",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6bcd5d13c6874e43b31c6d9628cbd189",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "_cType_",
        "TypeName": "int",
        "TypeRank": 0,
        "DefaultValue": "0",
        "Description": ""
      },
      "Id": "6a14f299a5a34a8e931f67e2ed8195cd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "35fde5d2f36842d19b19fb00c537f1e6",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Symbol, DynamoCore",
      "NodeType": "InputNode",
      "Parameter": {
        "Name": "_colors_",
        "TypeName": "DSCore.Color",
        "TypeRank": 1,
        "DefaultValue": "DesignScript.Builtin.Dictionary.ByKeysValues([], [])",
        "Description": " A list of colors that will be used to re-color the legend and the corresponding colored mesh(es).  The number of colors input here should match the numSegments_ value input above.  An easy way to generate a list of colors to input here is with the Dynamo \"Gradient\" component and a Dynamo \"Series\" component connected to the Gradient component's \"t\" input.  A bunch of Dynamo \"Swatch\" components is another way to generate a list of custom colors.  The default colors are a gradient spectrum from blue to yellow to red."
      },
      "Id": "481a2b82c6c64e99827ecea00f750ccd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c5613081d0a34d3caabcde00ff093463",
          "Name": "",
          "Description": "Symbol",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A function parameter, use with custom nodes.\r\n\r\nYou can specify the type and default value for parameter. E.g.,\r\n\r\ninput : var[]..[]\r\nvalue : bool = false"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "out[0];",
      "Id": "eafea9ae84bc4b5887a7167490f72727",
      "Inputs": [
        {
          "Id": "edf9c7e5daf64cbea58e7f632a764160",
          "Name": "out",
          "Description": "out",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f1fe74ab75024ebebc774b63aec9557b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "// A legend parameters to be plugged into any of the Ladybug components with a legend.\r\nlegendPar;",
      "Id": "cd97a95d3cba4fdd88968388c1eca63a",
      "Inputs": [
        {
          "Id": "6af43e663dd24106ac5247365c545ec4",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\n        \r\n\"\"\"Report errors\"\"\"\r\nimportErr, runErr = IN\r\nerrors = []\r\n\r\nif importErr and str(importErr).startswith(\"ERROR:\"):\r\n    errors.append(importErr)\r\n\r\nif runErr and str(runErr).startswith(\"ERROR:\"):\r\n    errors.append(runErr)\r\n\r\nif len(errors)==0:\r\n    OUT = \"All good! Vvizzzz.\"\r\nelse:\r\n    OUT = \"\\n\".join(errors)\r\n\r\n      ",
      "VariableInputPorts": true,
      "Id": "6f783a1b4f334afd91a44ca5cfe4ed66",
      "Inputs": [
        {
          "Id": "896ef1b6961a4bd4b06e1a36effdb7e8",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "62274318bb6741edbd02db6a46f6d61e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "caf6ae278d2a4f2cacc14e6d37c1e9ee",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Output, DynamoCore",
      "NodeType": "OutputNode",
      "ElementResolver": null,
      "Symbol": "// Report\r\nERRReport;",
      "Id": "b6e8846b49324e9e8be303690906e12b",
      "Inputs": [
        {
          "Id": "38ee985d285344a485b7932eae96d12a",
          "Name": "",
          "Description": "",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [],
      "Replication": "Disabled",
      "Description": "A function output, use with custom nodes"
    }
  ],
  "Connectors": [
    {
      "Start": "7b428173cd7143c0b9a380eacc12f8af",
      "End": "81e310e5a31f4d6aabbf317f11ff4168",
      "Id": "adc3a44e7f5c4bf58867e16461afad9b"
    },
    {
      "Start": "c844842c22154f0ab3be70ff03b91ed1",
      "End": "9787a3aaedb34e11946d6658e11d732e",
      "Id": "bca984d4f65b412d84e7847a8f48a6dd"
    },
    {
      "Start": "ece36f7f217e4349815f821ca0f897b0",
      "End": "7d14c748a6e14e25b17f4cbfd60216e5",
      "Id": "fabfad83bf5b48b3b5c07e0f85d1665f"
    },
    {
      "Start": "ece36f7f217e4349815f821ca0f897b0",
      "End": "896ef1b6961a4bd4b06e1a36effdb7e8",
      "Id": "4409afe9b8984483ad17fa1e36328b6e"
    },
    {
      "Start": "3360c2c8a9d14a95b5f10928639580a5",
      "End": "edf9c7e5daf64cbea58e7f632a764160",
      "Id": "591dcd8f44b54fbebc053dbcdd331586"
    },
    {
      "Start": "3360c2c8a9d14a95b5f10928639580a5",
      "End": "62274318bb6741edbd02db6a46f6d61e",
      "Id": "41e774442f52471da34e01d062de8f16"
    },
    {
      "Start": "6bcd5d13c6874e43b31c6d9628cbd189",
      "End": "1b56c28fbdf8470393bc33b8a7d95f79",
      "Id": "6f756c574ced48fdb5de6367de6c1c06"
    },
    {
      "Start": "35fde5d2f36842d19b19fb00c537f1e6",
      "End": "e587588c55b94dc890e1f5b505cec31d",
      "Id": "42c9aa7bb06b47e2b8a7b8aa1bcecf59"
    },
    {
      "Start": "c5613081d0a34d3caabcde00ff093463",
      "End": "7531ec2a855c440e98ccb6cbcdfbb215",
      "Id": "0ae68d1d84ef4b15be7154d7f79c9d3b"
    },
    {
      "Start": "f1fe74ab75024ebebc774b63aec9557b",
      "End": "6af43e663dd24106ac5247365c545ec4",
      "Id": "0479c025667841ceb261ac70cd650100"
    },
    {
      "Start": "caf6ae278d2a4f2cacc14e6d37c1e9ee",
      "End": "38ee985d285344a485b7932eae96d12a",
      "Id": "6e7275e66fcb474fbc5bb3d6d299b329"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": false,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.0.3.8810",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -34.0,
      "EyeY": -34.0,
      "EyeZ": 21.190000534057617,
      "LookX": -14.1899995803833,
      "LookY": -43.060001373291016,
      "LookZ": -41.650001525878906,
      "UpX": -0.17000000178813934,
      "UpY": 0.85000002384185791,
      "UpZ": -0.5
    },
    "NodeViews": [
      {
        "Id": "fcdf53c392494bbcbc5d64d7a0914a3c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "input python script",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -750.0,
        "Y": 390.0
      },
      {
        "Id": "bb003755c10740f09eecd3db8dd0e7a2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "import and prepare py code",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -355.0,
        "Y": 385.0
      },
      {
        "Id": "7c9fbab7d6b04d988b1d75a6a24de9b9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "core",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -5.0,
        "Y": 456.0
      },
      {
        "Id": "bd204404be4241fd99ebdde12fccee98",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "_domain_",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -750.0,
        "Y": 475.0
      },
      {
        "Id": "6a14f299a5a34a8e931f67e2ed8195cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "_cType_",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -750.0,
        "Y": 570.0
      },
      {
        "Id": "481a2b82c6c64e99827ecea00f750ccd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "_colors_",
        "ShowGeometry": true,
        "Excluded": false,
        "X": -750.0,
        "Y": 665.0
      },
      {
        "Id": "eafea9ae84bc4b5887a7167490f72727",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "decompose outputs",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 150.0,
        "Y": 515.0
      },
      {
        "Id": "cd97a95d3cba4fdd88968388c1eca63a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "legendPar",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 380.0,
        "Y": 475.0
      },
      {
        "Id": "6f783a1b4f334afd91a44ca5cfe4ed66",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Error report",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 150.0,
        "Y": 380.0
      },
      {
        "Id": "b6e8846b49324e9e8be303690906e12b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "ERRReport",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 380.0,
        "Y": 380.0
      }
    ],
    "Annotations": [],
    "X": 400.0,
    "Y": -100.0,
    "Zoom": 0.5
  }
}